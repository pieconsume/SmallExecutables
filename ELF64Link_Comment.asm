defs:
 [BITS 64]
 [DEFAULT REL]
 [ORG 0]
elf:
 dd 0x464C457F ; File identifier (0x7F, 'ELF')
 db 0x02       ; Executable format (0x01=32bit, 0x02=64bit)
 db 0x01       ; Endianness (0x01=little, 0x02=big)
 db 0x01       ; ELF Version
 db 0x00       ; Target ABI (0x00=System V)
 db 0x00       ; ABI version
 times 7 db 0  ; Unused/reserved
 dw 0x0003     ; Object type (0x0003=Dynamic)
 dw 0x003E     ; Target machine (0x003E=AMDx86-64)
 dd 0x00000001 ; ELF Version
 dq _start     ; Program entry point
 dq proghead   ; Program header table
 dq 0          ; Section header table
 dd 0          ; Flags
 dw 0x0040     ; Header size
 dw 0x0038     ; Program header entry size
 dw 0x0004     ; Program header entry count
 dw 0          ; Section header entry size
 dw 0          ; Section header entry count
 dw 0          ; Section header string table index
proghead:
 ; RWE flags (other than for load) were arbitrarily copied from a hexdump
 ; Self descriptor must be placed before any load segments
 proghead.phsd:
  dd 0x00000006 ; Program header self-descriptor
  dd 0x00000004 ; Readonly
  dq proghead
  dq proghead
  dq proghead
  dq proghead.end-proghead
  dq proghead.end-proghead
  dq 0x08
 proghead.load:
  dd 0x00000001 ; Load segment
  dd 0x00000007 ; Read/write/execute
  dq 0
  dq 0
  dq 0
  dq progend
  dq progend
  dq 0x1000     ; ld.so enforces page alignment for load segments
 proghead.dynamic:
  dd 0x00000002 ; Dynamic segment
  dd 0x00000006 ; Read/write
  dq dynamic
  dq dynamic
  dq dynamic
  dq dynamic.end-dynamic
  dq dynamic.end-dynamic
  dq 0x08
 proghead.interp:
  dd 0x00000003 ; Interpreter
  dd 0x00000004 ; Readonly
  dq interp
  dq interp
  dq interp
  dq interp.end-interp
  dq interp.end-interp
  dq 0x01
 proghead.end:
dynamic:
 dq 0x01              ; Required library
 dq libcstr-dynstr    ; Requested library (index into the specified string table)
 dq 0x05              ; String table
 dq dynstr            ; File offset of string table
 dq 0x06              ; Symbol table
 dq dynsym            ; File offset of symbol table
 dq 0x07              ; Relocation table with addends
 dq reloc             ; File offset of relocation table
 dq 0x08              ; Relocation table size in bytes
 dq reloc.end-reloc   ; Size
 dq 0x09              ; Relocation with addends entry size in bytes
 dq 0x18              ; Size
 dq 0x0A              ; String table size in bytes
 dq dynstr.end-dynstr ; Size
 dq 0x0B              ; Symbol table entry size in byte
 dq 0x18              ; Size
 dq 0                 ; Zero terminator
 dq 0
 dynamic.end:
dynsym:
 startsym:
  dd startstr-dynstr  ; Symbol name (index into the string table)
  db 0x12             ; Flags (0x1X=Global, 0xX2=function)
  db 0                ; Other (unused)
  dw 0                ; Section header index (unused)
  dq 0                ; Value (unused)
  dq 0                ; Size (unused)
 printfsym:
  dd printfstr-dynstr ; Symbol name (index into the string table)
  db 0x12             ; Flags (0x1X=Global, 0xX2=function)
  db 0                ; Other (unused)
  dw 0                ; Section header index (unused)
  dq 0                ; Value (unused)
  dq 0                ; Size (unused)
 dynsym.end:
reloc:
 dq __libc_start_main       ; Relocation address
 dd 0x06                    ; Symbol type (Global data)
 dd (startsym-dynsym)/0x18  ; Symbol index
 dq 0                       ; Addend
 dq printf                  ; Relocation address
 dd 0x06                    ; Symbol type
 dd (printfsym-dynsym)/0x18 ; Symbol index
 dq 0                       ; Addend
 reloc.end:
interp:
 db '/lib64/ld-linux-x86-64.so.2', 0
 interp.end:
dynstr:
 db 0
 startstr  db '__libc_start_main', 0
 printfstr db 'printf', 0
 libcstr   db 'libc.so.6', 0
 dynstr.end:

_start:
 ; Standard libc initializer generated by most compilers
 xor ebp, ebp
 mov r9, rdx
 pop rsi
 mov rdx, rsp
 and rsp, 0xFFFFFFFFFFFFFFF0
 push rax
 push rsp
 lea r8, [stub]  ; Finish function
 lea rcx, [stub] ; Init function
 lea rdi, [main] ; Main function
 call [__libc_start_main]
stub:
 ret
main:
 sub rsp, 8 ; Align stack
 lea rdi, [hello]
 call [printf]
 mov eax, 60
 syscall
 hello db 'hello!', 10, 0
rels:
 __libc_start_main dq 0
 printf dq 0
progend: